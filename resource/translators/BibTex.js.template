var config = {
  citeCommand:      Zotero.getOption('citeCommand'),
  citeKeyFormat:    Zotero.getOption('citeKeyFormat'),
  exportCharset:    Zotero.getOption('exportCharset'),
  translator: {
    id: '/*= id =*/',
    label:  '/*= label =*/'
  }
};

function trLog(msg) { Zotero.debug('[better bibtex] ' + msg); }

trLog('config = ' + JSON.stringify(config));

function detectImport() {
  if (config.translator.id == 'b4a5ab19-c3a2-42de-9961-07ae484b8cb0') {
    trLog(config.translator.label + ' does not do imports');
    return false;
  } else {
    trLog(config.translator.label + ': testing data for import');
  }

	var maxChars = 1048576; // 1MB
	
	var inComment = false;
	var block = "";
	var buffer = "";
	var chr = "";
	var charsRead = 0;
	
	var re = /^\s*@[a-zA-Z]+[\(\{]/;
	while((buffer = Zotero.read(4096)) && charsRead < maxChars) {
		trLog("Scanning " + buffer.length + " characters for BibTeX");
		charsRead += buffer.length;
		for (var i=0; i<buffer.length; i++) {
			chr = buffer[i];
			
			if (inComment && chr != "\r" && chr != "\n") {
				continue;
			}
			inComment = false;
			
			if(chr == "%") {
				// read until next newline
				block = "";
				inComment = true;
			} else if((chr == "\n" || chr == "\r"
				// allow one-line entries
						|| i == (buffer.length - 1))
						&& block) {
				// check if this is a BibTeX entry
				if(re.test(block)) {
					return true;
				}
				
				block = "";
			} else if(" \n\r\t".indexOf(chr) == -1) {
				block += chr;
			}
		}
	}
}

var fieldMap = {
	address:"place",
	chapter:"section",
	edition:"edition",
	type:"type",
	series:"series",
	title:"title",
	volume:"volume",
	copyright:"rights",
	isbn:"ISBN",
	issn:"ISSN",
	lccn:"callNumber",
	shorttitle:"shortTitle",
	url:"url",
	doi:"DOI",
	abstract:"abstractNote",
  	nationality: "country",
  	language:"language",
  	assignee:"assignee"
};

var inputFieldMap = {
	booktitle :"publicationTitle",
	school:"publisher",
	institution:"publisher",
	publisher:"publisher",
	issue:"issue",
	location:"place"
};

var zotero2bibtexTypeMap = {
	"book":"book",
	"bookSection":"incollection",
	"journalArticle":"article",
	"magazineArticle":"article",
	"newspaperArticle":"article",
	"thesis":"phdthesis",
	"letter":"misc",
	"manuscript":"unpublished",
	"patent" :"patent",
	"interview":"misc",
	"film":"misc",
	"artwork":"misc",
	"webpage":"misc",
	"conferencePaper":"inproceedings",
	"report":"techreport"
};

var bibtex2zoteroTypeMap = {
	"book":"book", // or booklet, proceedings
	"inbook":"bookSection",
	"incollection":"bookSection",
	"article":"journalArticle", // or magazineArticle or newspaperArticle
	"patent" :"patent",
	"phdthesis":"thesis",
	"unpublished":"manuscript",
	"inproceedings":"conferencePaper", // check for conference also
	"conference":"conferencePaper",
	"techreport":"report",
	"booklet":"book",
	"manual":"book",
	"mastersthesis":"thesis",
	"misc":"book",
	"proceedings":"book"
};

/*
 * three-letter month abbreviations. i assume these are the same ones that the
 * docs say are defined in some appendix of the LaTeX book. (i don't have the
 * LaTeX book.)
 */
var months = ["jan", "feb", "mar", "apr", "may", "jun",
			  "jul", "aug", "sep", "oct", "nov", "dec"];

var jabref = {
	format: null,
	root: {}
};

/*= render unicodeconverter.js =*/

convert.latex2unicode["\\url"] = '';
convert.latex2unicode["\\href"] = '';

convert.to_latex = function(str) {
  str = '' + str;
  var res = '';
  var strlen = str.length;
  var c, ca;
  var l;
  var textMode = true;
  var mathMode = false;

  for (var i=0; i < strlen; i++) {
    c = str.charAt(i);
    if (!convert.unicode2latex[c]) {
      convert.unicode2latex[c] = {latex: c};
    }

    if (config.exportCharset == 'UTF-8' && !convert.unicode2latex[c].force) {
      ca = c;
    } else {
      ca = convert.unicode2latex[c].latex;
    }

    if (ca[0] == '\\' || ca[0] == '{') { // command or block always OK
      if (convert.unicode2latex[c] && convert.unicode2latex[c].math != mathMode) {
        if (convert.unicode2latex[c].math) {
          res += '\\ensuremath{'
        } else {
          res += '}'
        }
        mathMode = convert.unicode2latex[c].math;
      }

      res += ca;
      textMode = ca.match(/[} ]$/);
    } else {
      if (!textMode) {
        res += '{}';
        textMode = true;
      }
      res += c;
    }
  }

  if (mathMode) { res += '}'; }

  return res.replace(/{}\s+/g, ' ');
}

convert.from_latex = function(str) {
  var chunks = str.split('\\');
  var res = chunks.shift();
  var m, i, c, l;

  for (chunk of chunks) {
    chunk = '\\' + chunk;
    l = chunk.length;
    m = null;
    for (i=2; i<=l; i++) {
      if (convert.latex2unicode[chunk.substring(0, i)]) {
        m = i;
      } else {
        break;
      }
    }

    if (m) {
      res += convert.latex2unicode[chunk.substring(0, m)] + chunk.substring(m, chunk.length);
    } else {
      res += chunk;
    }
  }
  return res;
}

var strings = {};
var keyRe = /[a-zA-Z0-9\-]/;
var keywordSplitOnSpace = true;
var keywordDelimRe = '\\s*[,;]\\s*';
var keywordDelimReFlags = '';

function setKeywordSplitOnSpace( val ) {
	keywordSplitOnSpace = val;
}

function setKeywordDelimRe( val, flags ) {
	//expect string, but it could be RegExp
	if(typeof(val) != 'string') {
		keywordDelimRe = val.toString().slice(1, val.toString().lastIndexOf('/'));
		keywordDelimReFlags = val.toString().slice(val.toString().lastIndexOf('/')+1);
	} else {
		keywordDelimRe = val;
		keywordDelimReFlags = flags;
	}
}

function processField(item, field, value) {
	if(Zotero.Utilities.trim(value) == '') return null;
	if(fieldMap[field]) {
		item[fieldMap[field]] = value;
	} else if(inputFieldMap[field]) {
		item[inputFieldMap[field]] = value;
	} else if(field == "journal") {
		if(item.publicationTitle) {
			item.journalAbbreviation = value;
		} else {
			item.publicationTitle = value;
		}
	} else if(field == "fjournal") {
		if(item.publicationTitle) {
			// move publicationTitle to abbreviation
			item.journalAbbreviation = value;
		}
		item.publicationTitle = value;
	} else if(field == "author" || field == "editor" || field == "translator") {
		// parse authors/editors/translators
		var names = value.split(/ and /i); // now case insensitive
		for(var i in names) {
			var name = names[i];
			// skip empty names
			if (name.trim() == '') {
				continue;
			}
			// Names in BibTeX can have three commas
			pieces = name.split(',');
			var creator = {};
			if (pieces.length > 1) {
				creator.firstName = pieces.pop().trim();
				creator.lastName = pieces.join(',').trim();
				creator.creatorType = field;
			} else {
				creator = Zotero.Utilities.cleanAuthor(name, field, false);
			}
			item.creators.push(creator);
		}
	} else if(field == "institution" || field == "organization") {
		item.backupPublisher = value;
	} else if(field == "number"){ // fix for techreport
		if (item.itemType == "report") {
			item.reportNumber = value;
		} else if (item.itemType == "book" || item.itemType == "bookSection") {
			item.seriesNumber = value;
		} else if (item.itemType == "patent"){
			item.patentNumber = value;
		} else {
			item.issue = value;
		}
	} else if(field == "month") {
		var monthIndex = months.indexOf(value.toLowerCase());
		if(monthIndex != -1) {
			value = Zotero.Utilities.formatDate({month:monthIndex});
		} else {
			value += " ";
		}
		
		if(item.date) {
			if(value.indexOf(item.date) != -1) {
				// value contains year and more
				item.date = value;
			} else {
				item.date = value+item.date;
			}
		} else {
			item.date = value;
		}
	} else if(field == "year") {
		if(item.date) {
			if(item.date.indexOf(value) == -1) {
				// date does not already contain year
				item.date += value;
			}
		} else {
			item.date = value;
		}
	} else if(field == "pages") {
		if (item.itemType == "book" || item.itemType == "thesis" || item.itemType == "manuscript") {
			item.numPages = value;
		}
		else {
			item.pages = value.replace(/--/g, "-");
		}
	} else if(field == "note") {
		item.extra += "\n"+value;
	} else if(field == "howpublished") {
		if(value.length >= 7) {
			var str = value.substr(0, 7);
			if(str == "http://" || str == "https:/" || str == "mailto:") {
				item.url = value;
			} else {
				item.extra += "\nPublished: "+value;
			}
		}
	
	} 
	//accept lastchecked or urldate for access date. These should never both occur. 
	//If they do we don't know which is better so we might as well just take the second one
	else if (field == "lastchecked"|| field == "urldate"){
		item.accessDate = value;
	}
	else if(field == "keywords" || field == "keyword") {
		var re = new RegExp(keywordDelimRe, keywordDelimReFlags);
		if(!value.match(re) && keywordSplitOnSpace) {
			// keywords/tags
			item.tags = value.split(/\s+/);
		} else {
			item.tags = value.split(re);
		}
	} else if (field == "comment" || field == "annote" || field == "review") {
		item.notes.push({note:Zotero.Utilities.text2html(value)});
	} else if (field == "pdf" || field == "path" /*Papers2 compatibility*/) {
		item.attachments = [{path:value, mimeType:"application/pdf"}];
	} else if (field == "sentelink") { // the reference manager 'Sente' has a unique file scheme in exported BibTeX
		item.attachments = [{path:value.split(",")[0], mimeType:"application/pdf"}];
	} else if (field == "file") {
		var attachments = value.split(";");
		for(var i in attachments){
			var attachment = attachments[i];
			var parts = attachment.split(":");
			var filetitle = parts[0];
			var filepath = parts[1];
			if (filepath.trim() === '') continue; // skip empty entries
			var filetype = parts[2];

      if (!filetype) { throw value; }

			if (filetitle.length == 0) {
				filetitle = "Attachment";
			}
			if (filetype.match(/pdf/i)) {
				item.attachments.push({path:filepath, mimeType:"application/pdf", title:filetitle});
			} else {
				item.attachments.push({path:filepath, title:filetitle});
			}
		}
	}
}

function getFieldValue(read) {
	var value = "";
	// now, we have the first character of the field
	if(read == "{") {
		// character is a brace
		var openBraces = 1;
		while(read = Zotero.read(1)) {
			if(read == "{" && value[value.length-1] != "\\") {
				openBraces++;
				value += "{";
			} else if(read == "}" && value[value.length-1] != "\\") {
				openBraces--;
				if(openBraces == 0) {
					break;
				} else {
					value += "}";
				}
			} else {
				value += read;
			}
		}
		
	} else if(read == '"') {
		var openBraces = 0;
		while(read = Zotero.read(1)) {
			if(read == "{" && value[value.length-1] != "\\") {
				openBraces++;
				value += "{";
			} else if(read == "}" && value[value.length-1] != "\\") {
				openBraces--;
				value += "}";
			} else if(read == '"' && openBraces == 0) {
				break;
			} else {
				value += read;
			}
		}
	}
	
	if(value.length > 1) {
    value = convert.from_latex(value);

		//convert tex markup into permitted HTML
		value = mapTeXmarkup(value);

		// kill braces
		value = value.replace(/([^\\])[{}]+/g, "$1");
		if(value[0] == "{") {
			value = value.substr(1);
		}
		
		// chop off backslashes
		value = value.replace(/([^\\])\\([#$%&~_^\\{}])/g, "$1$2");
		value = value.replace(/([^\\])\\([#$%&~_^\\{}])/g, "$1$2");
		if(value[0] == "\\" && "#$%&~_^\\{}".indexOf(value[1]) != -1) {
			value = value.substr(1);
		}
		if(value[value.length-1] == "\\" && "#$%&~_^\\{}".indexOf(value[value.length-2]) != -1) {
			value = value.substr(0, value.length-1);
		}
		value = value.replace(/\\\\/g, "\\");
		value = value.replace(/\s+/g, " ");
	}

	return value;
}

function jabrefSplit(str, sep) {
	var quoted = false;
	var result = [];

	str = str.split('');
	while (str.length > 0) {
		if (result.length == 0) { result = ['']; }

		if (str[0] == sep) {
			str.shift();
			result.push('');
		} else {
			if (str[0] == '\\') { str.shift(); }
			result[result.length - 1] += str.shift();
		}
	}
	return result;
}

function jabrefCollect(arr, func) {
	if (arr == null) { return []; }

	var result = [];

	for (var i = 0; i < arr.length; i++) {
		if (func(arr[i])) {
			result.push(arr[i]);
		}
	}
	return result;
}

function processComment() {
	var comment = "";
	var read;
	var collectionPath = [];
	var parentCollection, collection;

	while(read = Zotero.read(1)) {
		if (read == "}") { break; } // JabRef ought to escape '}' but doesn't; embedded '}' chars will break the import just as it will on JabRef itself
		comment += read;
	}

	if (comment == 'jabref-meta: groupsversion:3;') {
		jabref.format = 3;
		return;
	}

	if (comment.indexOf('jabref-meta: groupstree:') == 0) {
		if (jabref.format != 3) {
			trLog("jabref: fatal: unsupported group format: " + jabref.format);
			return;
		}
		comment = comment.replace(/^jabref-meta: groupstree:/, '').replace(/[\r\n]/gm, '')

		var records = jabrefSplit(comment, ';');
		while (records.length > 0) {
			var record = records.shift();
			var keys = jabrefSplit(record, ';');
			if (keys.length < 2) { continue; }

			var record = {id: keys.shift()};
			record.data = record.id.match(/^([0-9]) ([^:]*):(.*)/);
			if (record.data == null) {
				trLog("jabref: fatal: unexpected non-match for group " + record.id);
				return;
			}
			record.level = parseInt(record.data[1]);
			record.type = record.data[2]
			record.name = record.data[3]
			record.intersection = keys.shift(); // 0 = independent, 1 = intersection, 2 = union

			if (isNaN(record.level)) {
				trLog("jabref: fatal: unexpected record level in " + record.id);
				return;
			}

			if (record.level == 0) { continue; }
			if (record.type != 'ExplicitGroup') {
				trLog("jabref: fatal: group type " + record.type + " is not supported");
				return;
			}

			collectionPath = collectionPath.slice(0, record.level - 1).concat([record.name]);
			trLog("jabref: locating level " + record.level + ": " + collectionPath.join('/'));

			if (jabref.root.hasOwnProperty(collectionPath[0])) {
				collection = jabref.root[collectionPath[0]];
				trLog("jabref: root " + collection.name + " found");
			} else {
				collection = new Zotero.Collection();
				collection.name = collectionPath[0];
				collection.type = 'collection';
				collection.children = [];
				jabref.root[collectionPath[0]] = collection;
				trLog("jabref: root " + collection.name + " created");
			}
			parentCollection = null;

			for (var i = 1; i < collectionPath.length; i++) {
				var path = collectionPath[i];
				trLog("jabref: looking for child " + path + " under " + collection.name);

				var child = jabrefCollect(collection.children, function(n) { return (n.name == path)})
				if (child.length != 0) {
					child = child[0]
					trLog("jabref: child " + child.name + " found under " + collection.name);
				} else {
					child = new Zotero.Collection();
					child.name = path;
					child.type = 'collection';
					child.children = [];

					collection.children.push(child);
					trLog("jabref: child " + child.name + " created under " + collection.name);
				}

				parentCollection = collection;
				collection = child;
			}

			if (parentCollection) {
				parentCollection = jabrefCollect(parentCollection.children, function(n) { return (n.type == 'item') });
			}

			if (record.intersection == '2' && parentCollection) { // union with parent
				collection.children = parentCollection;
			}

			while(keys.length > 0) {
				key = keys.shift();
				if (key != '') {
					trLog('jabref: adding ' + key + ' to ' + collection.name);
					collection.children.push({type: 'item', id: key});
				}
			}

			if (parentCollection && record.intersection == '1') { // intersection with parent
				collection.children = jabrefMap(collection.children, function(n) { parentCollection.indexOf(n) !== -1; });
			}
		}
	}
}

function beginRecord(type, closeChar) {
	type = Zotero.Utilities.trimInternal(type.toLowerCase());
	if(type != "string") {
		var zoteroType = bibtex2zoteroTypeMap[type];
		if (!zoteroType) {
			trLog("discarded item from BibTeX; type was "+type);
			return;
		}
		var item = new Zotero.Item(zoteroType);
		
		item.extra = "";
	}
	
	var field = "";
	
	// by setting dontRead to true, we can skip a read on the next iteration
	// of this loop. this is useful after we read past the end of a string.
	var dontRead = false;
	
	while(dontRead || (read = Zotero.read(1))) {
		dontRead = false;
		
		if(read == "=") {								// equals begin a field
		// read whitespace
			var read = Zotero.read(1);
			while(" \n\r\t".indexOf(read) != -1) {
				read = Zotero.read(1);
			}
			
			if(keyRe.test(read)) {
				// read numeric data here, since we might get an end bracket
				// that we should care about
				value = "";
				value += read;
				
				// character is a number
				while((read = Zotero.read(1)) && keyRe.test(read)) {
					value += read;
				}
				
				// don't read the next char; instead, process the character
				// we already read past the end of the string
				dontRead = true;
				
				// see if there's a defined string
				if(strings[value]) value = strings[value];
			} else {
				var value = getFieldValue(read);
			}
			
			if(item) {
				processField(item, field.toLowerCase(), value);
			} else if(type == "string") {
				strings[field] = value;
			}
			field = "";
		} else if(read == ",") {						// commas reset
			if (item.itemID == null) {
				item.itemID = field; // itemID = citekey
			}
			field = "";
		} else if(read == closeChar) {
			if(item) {
				if(item.extra) {
          item.extra += "\n";
        } else {
          item.extra = '';
        }
        item.extra += 'bibtex: ' + item.itemID;

				item.complete();
			}
			return;
		} else if(" \n\r\t".indexOf(read) == -1) {		// skip whitespace
			field += read;
		}
	}
}

function doImport() {
	var read = "", text = "", recordCloseElement = false;
	var type = false;
	
	while(read = Zotero.read(1)) {
		if(read == "@") {
			type = "";
		} else if(type !== false) {
			if(type == "comment") {
				processComment();
				type = false;
			} else if(read == "{") {		// possible open character
				beginRecord(type, "}");
				type = false;
			} else if(read == "(") {		// possible open character
				beginRecord(type, ")");
				type = false;
			} else if(/[a-zA-Z0-9-_]/.test(read)) {
				type += read;
			}
		}
	}

	for (var key in jabref.root) {
		if (jabref.root.hasOwnProperty(key)) { jabref.root[key].complete(); }
	}
}

function escape_url(str) {
  return str.replace(/[\{\}\\_]/g, function(chr){'%' + ('00' + chr.charCodeAt(0).toString(16)).slice(-2)});
}
function escape(value, sep) {
  if (typeof value == 'number') { return value; }
  if (!value) { return; }

  if (value instanceof Array) {
    if (value.length == 0) { return; }
    return [escape(v) for (v of value)].join(sep);
  }

  return convert.to_latex(value);
}

function writeField(field, value) {
  if (typeof value == 'number') {
  } else {
    if (!value) { return; }
    value = '{' + value + '}';
  }
  
  Zotero.write(",\n\t" + field + " = " + value);
}

function mapHTMLmarkup(characters){
	//converts the HTML markup allowed in Zotero for rich text to TeX
	//since  < and > have already been escaped, we need this rather hideous code - I couldn't see a way around it though.
	//italics and bold
	characters = characters.replace(/\{\\textless\}i\{\\textgreater\}(.+?)\{\\textless\}\/i{\\textgreater\}/g, "\\textit{$1}")
		.replace(/\{\\textless\}b\{\\textgreater\}(.+?)\{\\textless\}\/b{\\textgreater\}/g, "\\textbf{$1}");
	//sub and superscript
	characters = characters.replace(/\{\\textless\}sup\{\\textgreater\}(.+?)\{\\textless\}\/sup{\\textgreater\}/g, "\$^{\\textrm{$1}}\$")
		.replace(/\{\\textless\}sub\{\\textgreater\}(.+?)\{\\textless\}\/sub\{\\textgreater\}/g, "\$_{\\textrm{$1}}\$");
	//two variants of small caps
	characters = characters.replace(/\{\\textless\}span\sstyle=\"small\-caps\"\{\\textgreater\}(.+?)\{\\textless\}\/span{\\textgreater\}/g, "\\textsc{$1}")
		.replace(/\{\\textless\}sc\{\\textgreater\}(.+?)\{\\textless\}\/sc\{\\textgreater\}/g, "\\textsc{$1}");
	return characters;
}


function mapTeXmarkup(tex){
	//reverse of the above - converts tex mark-up into html mark-up permitted by Zotero
	//italics and bold
	tex = tex.replace(/\\textit\{([^\}]+\})/g, "<i>$1</i>").replace(/\\textbf\{([^\}]+\})/g, "<b>$1</b>");
	//two versions of subscript the .* after $ is necessary because people m
	tex = tex.replace(/\$[^\{\$]*_\{([^\}]+\})\$/g, "<sub>$1</sub>").replace(/\$[^\{]*_\{\\textrm\{([^\}]+\}\})/g, "<sub>$1</sub>");	
	//two version of superscript
	tex = tex.replace(/\$[^\{]*\^\{([^\}]+\}\$)/g, "<sup>$1</sup>").replace(/\$[^\{]*\^\{\\textrm\{([^\}]+\}\})/g, "<sup>$1</sup>");	
	//small caps
	tex = tex.replace(/\\textsc\{([^\}]+)/g, "<span style=\"small-caps\">$1</span>");
	return tex;
}
//Disable the isTitleCase function until we decide what to do with it.
/* const skipWords = ["but", "or", "yet", "so", "for", "and", "nor",
	"a", "an", "the", "at", "by", "from", "in", "into", "of", "on",
	"to", "with", "up", "down", "as", "while", "aboard", "about",
	"above", "across", "after", "against", "along", "amid", "among",
	"anti", "around", "as", "before", "behind", "below", "beneath",
	"beside", "besides", "between", "beyond", "but", "despite",
	"down", "during", "except", "for", "inside", "like", "near",
	"off", "onto", "over", "past", "per", "plus", "round", "save",
	"since", "than", "through", "toward", "towards", "under",
	"underneath", "unlike", "until", "upon", "versus", "via",
	"within", "without"];

function isTitleCase(string) {
	const wordRE = /[\s[(]([^\s,\.:?!\])]+)/g;

	var word;
	while (word = wordRE.exec(string)) {
		word = word[1];
		if(word.search(/\d/) != -1	//ignore words with numbers (including just numbers)
			|| skipWords.indexOf(word.toLowerCase()) != -1) {
			continue;
		}

		if(word.toLowerCase() == word) return false;
	}
	return true;
}
*/


var CiteKeys = {
  keys: [],
  embeddedKeyRE: /bibtex:\s*([^\s\r\n]+)/,
  unsafechars: /[^a-z0-9\!\$\&\*\+\-\.\/\:\;\<\>\?\[\]\^\_\`\| ]/ig,

  extract: function(item) {
    trLog('CiteKeys.extract');
    if (!item.extra) { return null; }

    var m = CiteKeys.embeddedKeyRE.exec(item.extra);
    if (!m) { return null; }

    item.extra = item.extra.replace(m[0], '');
    var key = m[1];
    if (CiteKeys.keys[key]) { trLog('BibTex export: duplicate key ' + key); }
    CiteKeys.keys[key] = true;
    return key;
  },

  getCreators: function(item, onlyEditors) {
    if(!item.creators || !item.creators.length) { return null; }

    var creators = {authors: [], editors: [], translators: [], collaborators: []};
    var primaryCreatorType = Zotero.Utilities.getCreatorsForType(item.itemType)[0];
    var creator;
    for(creator of item.creators) {
      if (!creator.lastName) { continue; }
      var name = (creator.lastName);
      if (name == '') { continue; }

      if ((creator.creatorType == "editor") || (creator.creatorType == "seriesEditor")) {
        creators.editors.push(name);
      } else if (creator.creatorType == "translator") {
        creators.translators.push(name);
      } else if (creator.creatorType == primaryCreatorType) {
        creators.authors.push(name);
      } else {
        creators.collaborators.push(name);
      }
    }

    if (onlyEditors) {
      if (creators.editors.length > 0) { return creators.editors; }
      return null;
    }

    if (creators.authors.length > 0) { return creators.authors; }
    if (creators.editors.length > 0) { return creators.editors; }
    if (creators.collaborators.length > 0) { return creators.collaborators; }
    if (creators.translators.length > 0) { return creators.translators; }
    return null;
  },

  clean: function(str) {
    return ZU.removeDiacritics(str).replace(CiteKeys.unsafechars, '').trim();
  },

  _auth: function(item, onlyEditors, n, m) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    var author = authors[m || 0];
    if (author && n) { author = author.substring(0, n); }
    return author;
  },

  _authorLast: function(item, onlyEditors) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    return authors[creator.authors.length - 1];
  },

  _authors: function(item, onlyEditors, n) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    if (n) {
      var etal = (authors.length > n);
      authors = authors.slice(0, n);
      if (etal) { authors.push('EtAl'); } 
    }
    authors = authors.join('');
    return authors;
  },

  _authorsAlpha: function(item, onlyEditors) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    switch (authors.length) {
      case 1:
        return authors[0].substring(0, 3);
      case 2:
      case 3:
      case 4:
        return [author.substring(0, 1) for (author of authors)].join('');
      default:
        return [author.substring(0, 1) for (author of authors.slice(0, 3))].join('') + '+';
    }
  },

  _authIni: function(item, onlyEditors, n) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    return [author.substring(0, n) for (author of authors)].join('');
  },

  _authorIni: function(item, onlyEditors) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    var firstAuthor = authors.shift();

    return firstAuthor.substring(0, 5) + [[a.substring(0, 1) for (a in auth.split(/\s+/))].join('') for(auth in authors)].join('');
  },

  _auth_auth_ea: function(item, onlyEditors) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    var postfix = (authors.length > 2 ? '.ea' : '');
    return authors.slice(0,2).join('') + postfix;
  },

  _auth_etal: function(item, onlyEditors) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    var postfix = (authors.length > 2 ? '.etal' : '');
    return authors.slice(0,2).join('') + postfix;
  },

  _authshort: function(item, onlyEditors) {
    var authors = CiteKeys.getCreators(item, onlyEditors);
    if (!authors) { return null; }

    switch (authors.length) {
      case 1:         return authors[0];
      case 2: case 3: return [auth.substring(0,1) for (auth of authors)].join('');
      default:        return [auth.substring(0,1) for (auth of authors)].join('') + '+';
    }
  },

  _firstpage: function(item) {
    if (!item.pages) { return null;}
    var firstpage = null;
    item.pages.replace(/^([0-9]+)/, function(match, fp) { firstpage = fp; });
    return firstpage;
  },

  _keyword: function(item, dummy, n) {
    if (!item.tags || !item.tags[n]) { return null; }
    return items.tags[n].tag;
  },

  _lastpage: function(item) {
    if (!item.pages) { return null;}
    var lastpage = null;
    item.pages.replace(/([0-9]+)[^0-9]*$/, function(match, lp) { lastpage = lp; });
    return lastpage;
  },

  _shorttitle: function(item) {
    if (!item.title) { return null; }
    var words = [word for (word of CiteKeys.clean(item.title).split(/\s+/))];
    return words.slice(0,3).join('');
  },

  skipWords: ['a','an','the','some','from','on','in','to','of','do','with','der','die','das','ein','eine','einer','eines','einem','einen','un','une','la','le',
                           'l','el','las','los','al','uno','una','unos','unas','de','des','del','d'],

  _veryshorttitle: function(item) {
    if (!item.title) { return null; }
    var words = [word for (word of CiteKeys.clean(item.title).split(/\s+/))];
    trLog('veryshort: ' + JSON.stringify(words));
    words = [word for (word of words) if (CiteKeys.skipWords.indexOf(word.toLowerCase()) == -1)];
    trLog('veryshort (relevant): ' + JSON.stringify(words));
    trLog('veryshort (3): ' + JSON.stringify(words.slice(0,3)));
    return words.slice(0,3).join('');
  },

  _shortyear: function(item) {
    if (!item.date) { return null; }
    var date = Zotero.Utilities.strToDate(item.date);
    if (typeof date.year === 'undefined') { return null; }
    return (date.year % 100) + '';
  },

  _year: function(item) {
    if (!item.date) { return null; }
    var date = Zotero.Utilities.strToDate(item.date);
    if (typeof date.year === 'undefined') { return item.date; }
    return date.year;
  },

  _title: function(item) {
    return item.title;
  },

  to_abbr: function(value) {
    if (!value) { return null; }
    return [word.substring(0,1) for (word in value.split(/\s+/))].join('');
  },

  to_lower: function(value) {
    if (!value) { return null; }
    return value.toLowerCase();
  },

  to_upper: function(value) {
    if (!value) { return null; }
    return value.toUpperCase();
  },

  build: function(item) {
    trLog('CiteKeys.build');
    var citekey = CiteKeys.extract(item);
    if (citekey) { return citekey; }

    trLog('format = ' + config.citeKeyFormat);
    var basekey = config.citeKeyFormat.replace(/\[([^\]]+)\]/g, function(match, command) {
      trLog('citekey: ' + command);
      var cmds = command.split(':');
      var field = cmds.shift();
      var value = null;

      var N = null;
      var M = null;
      field.replace(/([0-9]+)_([0-9]+)$/, function(match, n, m) { N = n; M = m; return ''; });
      field.replace(/([0-9]+)$/, function(match, n) { N = n; return ''; });

      var onlyEditors = (field.match(/^edtr/) || field.match(/^editors/));
      field = field.replace(/^edtr/, 'auth').replace(/^editors/, 'authors');

      trLog('key: ' + field);
      var value = CiteKeys['_' + field.replace('.', '_')](item, onlyEditors, N, M);
      if (value) { value = CiteKeys.clean(value); }

      var cmd;
      for (cmd of cmds) {
        if (cmd.match(/^[(].*[)]$/)) {
          if (!value) { value = cmd.substring(1, cmd.length - 2); }
        } else {
          value = CiteKeys['to_' + cmd](value);
        }
        if (value) { value = CiteKeys.clean(value); }
      }

      return value ? value : '';
    });

  	basekey = CiteKeys.clean(basekey);
  	basekey = basekey.replace(CiteKeys.unsafechars, '').replace(' ', '');

  	citekey = basekey;
  	var i = 0;
  	while(CiteKeys.keys[citekey]) {
  		i++;
  		citekey = basekey + "-" + i;
  	}
  	CiteKeys.keys[citekey] = true;
  	return citekey;
  }
};
